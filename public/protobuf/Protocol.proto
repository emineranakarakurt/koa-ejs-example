syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.sdc_icube.FodoMustService.proto";
//option java_outer_classname = "FoDoMustProto";

// This declaration works as Protocol Buffers name space
package FoDoMustProto;

enum RequestHeaders {
    CSV_TO_DATA = 0;
    GET_DATA_INTERFACE_BY_ID = 1;
    CREATE_CLASSIFICATION = 2;
    APPLY_NORMALISATION = 3;
    APPLY_IMPUTATION = 4;
    APPLY_BORNE = 5;
    APPLY_FILTER_DATA = 6;
    GET_ANALYSIS = 7;
    GET_DATA_BY_ID = 8;
    GET_RESULT_CLASSIFICATION = 9;
    GET_RESULT_INITIAL = 10;
    GET_INFO_CLASSIF = 11;
    GET_RESULT_FINAL = 12;
    GET_INFO_CLASSIF_HYBRID = 13;
    REQUEST_CLIENT_ID = 14;
    GET_FINISH = 15;
    GET_SCALING = 16;
    GET_MATRICE = 17;
    GET_ROOT_CLASSIFICATION = 18;
    GET_CLUSTER_VIEW_ID = 19;
    OPEN_IMAGE = 20;
    GET_IMAGE_INTERFACE = 21;
    GET_BUFFER_IMAGE = 22;
    CREATE_DATA_IMAGE = 23;
    PUT_SEGMENTATION =  24;// Launch a detached segmentation
    REQUEST_SEGMENTATION = 25; // Launch a segmentation and fetch result (sequential execution)
    GET_SEGMENTATION_RESULT = 26;
    FETCH_SEGMENTATION = 27;
    UPDATE_SEGMENTATION = 28;
    SEGMENTATION_RESULT2DATA = 29;
    FETCH_SAMPLE_INDEXES = 30;
    ESTIMATE_DISTANCE = 31;
    UPDATE_CONSTRAINTS = 32;
    CREATE_AHC_CLASSIFICATION = 33;
    FETCH_ROI_COMPARISON_OF_RESULTS = 34;
    FETCH_ROI_CONFUSION_OF_RESULTS = 35;
    FETCH_ROI_SORTED_COMPARISON_OF_RESULTS = 36;
    CREATE_ROI_IMAGE = 37;
    FETCH_ROI_IMAGE_CLUSTERING_RESULT = 38;
    FETCH_ROI_CLUSTERING_COMPARISON_INFO = 39;
    GET_HISTORIC = 40;
}

enum ResponseHeaders {
    SCALING = 0;
    MATRICE = 1;
    DATA = 2;
    DATA_INTERFACE = 3;
    DATA_INTERFACE_ID = 4;
    ANALYSIS = 5;
    CLASSIFICATION_RESPONSE_CODE = 6;
    RESULT_CLASSIFICATION = 7;
    RESULT_INITIAL_CLASSIFICATION = 8;
    INFO_CLASSIF = 9;
    RESULT_FINAL_CLASSIFICATION = 10;
    INFO_CLASSIFICATION_HYBRID = 11;
    FINISH_RESULT = 12;
    CLUSTER_VIEW_ID = 13;
    TEST = 14;
    ROOT_CLASSIFICATION = 15;
    OPEN_IMAGE_RESPONSE = 16;
    IMAGE_INTERFACE = 17;
    BUFFERED_IMAGE = 18;
    DATA_IMAGE = 19;
    SEGMENTATION_SUCCESS = 20;
    SEGMENTATION_FAIL = 21;
    SEGMENTATION_INCOMPLETE = 22;
    PUT_SEGMENTATION_SUCCESS = 23;
    PUT_SEGMENTATION_FAIL = 24;
    FETCH_SEG_SUCCESS = 25;
    FETCH_SEG_INCOMPLETE = 26;
    FETCH_SEG_N_EXIST = 27;
    UPDATE_SEG_SUCCESS = 28;
    UPDATE_SEG_INCOMPLETE = 29;
    UPDATE_SEG_N_EXIST = 30;
    DATA_FROM_SEGMENTATION = 31;
    FETCH_SAMPLE_IDXES_SUCESS = 32;
    ESTIMATE_DISTANCE_RESPONSE = 33;
    UPDATE_CONSTRAINTS_RESPONSE = 34;
    CREATE_AHC_RESPONSE = 35;
    ROI_COMPARISON_OF_RESULTS_RESPONSE = 36;
    ROI_SORTED_COMPARISON_OF_RESULTS_RESPONSE = 37;
    ROI_CONFUSION_OF_RESULTS_RESPONSE = 38;
    CREATE_ROI_IMAGE_RESPONSE = 39;
    FETCH_ROI_IMAGE_CLUSTERING_RESULT_RESPONSE = 40;
    ROI_CLUSTERING_COMPARISON_INFO_RESPONSE = 41;
    RESPONSE_CLIENT_ID = 42;
    HISTORIC = 43;
}

enum Status {
    SUCCESS = 0;
    FAIL = 1;

    /* Image storage service*/
    EXISTENT_IMAGE = 2;
    UP_LOAD_SUCCESS = 3;
    TO_UP_LOAD = 4;

    IMAGE_DUPLICATED = 5;
    DATA_BASE_EXCEPTION = 6;
    FS_IO_EXCEPTION = 7;
    NETWORK_ERROR = 8;
}